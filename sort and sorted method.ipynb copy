{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##hint when you create a node the next has nothing at that starting point\n",
    "class Node:\n",
    "    def __init__(self,data):\n",
    "        self.data = data\n",
    "        self.next = None\n",
    "        \n",
    "##hint the linked list has a head, but what will be in that head is a node later on.\n",
    "class Linked:\n",
    "    def __init__(self):\n",
    "        self.head = None\n",
    "        \n",
    "    def append(self,data):\n",
    "        new_node = Node(data)\n",
    "        ##once this happens oncew it is for now on a NODE\n",
    "##is  if self.head = None: THE SAME AS self.head is None       \n",
    "        if self.head == None:\n",
    "            self.head = new_node\n",
    "###ALWAYS RETURN AT END OF first part of if statement \n",
    "            return\n",
    "###CANT DO THIS b/c with linked list you have to loop to where the last place was in the linked list before appending it.\n",
    "       ### else:\n",
    "            ##self.new_node.next = new_node\n",
    "###--------------------------\n",
    "##so now after if statement you can assign a variable since the self.head is node\n",
    "        cur_node = self.head\n",
    "        while cur_node.next:\n",
    "            cur_node = cur_node.next\n",
    "        cur_node.next = new_node\n",
    "            \n",
    "            \n",
    "        \n",
    "        \n",
    "    ##start at the beginning of the list, print out the data component of this node and then move head to the right\n",
    "    ##and print the data field of this node and then just keep doing that till you hit None. Once you do that you know \n",
    "    ##hit the end of the list. \n",
    "    def print_list(self):\n",
    "        cur_node = self.head\n",
    "        while cur_node:\n",
    "            print(cur_node.data)\n",
    "            cur_node = cur_node.next\n",
    "            \n",
    "Linked_of = Linked()\n",
    "Linked_of.append(\"r\")\n",
    "Linked_of.append(\"v\")\n",
    "Linked_of.append(\"e\")\n",
    "Linked_of.print_list()\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Venus', 6053, 5.24, 0.456),\n",
       " ('Mercury', 2440, 5.43, 0.395),\n",
       " ('jupiter', 2345, 3.455, 0.4522)]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "planets = [(\"Mercury\", 2440, 5.43,0.395 ),\n",
    "          (\"Venus\", 6053,5.24, 0.456),\n",
    "          (\"jupiter\", 2345,3.455, 0.4522)]\n",
    "\n",
    "size = lambda pl: pl[1]\n",
    "##the key is specifing where the sort is sorting so the input is a fxn(thats a list since sort only works on list)\n",
    "##and you want the output to be on sorting on JUST THE SECOND INDEX, that is the key. \n",
    "\n",
    "\n",
    "planets.sort(key=size, reverse=True)\n",
    "planets\n",
    "##list.sort() changes the list\n",
    "##but if you wanted to create a sorrted copy, or wanted to sort a tuple you use \n",
    "#SORTED"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "###when calling sorted, the first object is a list tuple, or any object with an iterator\n",
    "##"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
